{
    parserClass="org.intellij.sdk.language.parser.IlocParser"
    psiImplUtilClass="org.intellij.sdk.language.psi.impl.IlocPsiImplUtil"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Iloc"
    psiImplClassSuffix="Impl"
    psiPackage="org.intellij.sdk.language.psi"
    psiImplPackage="org.intellij.sdk.language.psi.impl"

    elementTypeHolderClass="org.intellij.sdk.language.psi.IlocTypes"
    elementTypeClass="org.intellij.sdk.language.psi.IlocElementType"
    tokenTypeClass="org.intellij.sdk.language.psi.IlocTokenType"

    tokens=[
        COLON=':'
        COMMA=','
        OP_1='=>'
        OP_2='->'
        NL='regexp:(\r\n|\n|\r)'

        string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
        comment='regexp:(//.*)'
        var='regexp:@\w+'
        integer='regexp:\d+'
        id='regexp:\w+'
        white_space='regexp:[\t ]+'
    ]
}

root ::= NL* instruction? (NL+ instruction)* NL*

private instruction ::= (label COLON)? operation

private operation ::= function inArgs? ((OP_1 outArgs) | (OP_2 labels))?

private outArgs ::= outArg (COMMA outArg)*

private inArgs ::= inArg (COMMA inArg)*

private labels ::= labelRef (COMMA labelRef)*

private inArg ::= integer | string | variable | registerRef

private outArg ::=  integer | string | variable | register

labelRef ::= id {
    methods=[getReference]
}

registerRef ::= id {
    methods=[getReference]
}

label ::= id {
    mixin="org.intellij.sdk.language.psi.impl.IlocNamedElementImpl"
    implements="org.intellij.sdk.language.psi.IlocNamedElement"
    methods=[getName getType setName getNameIdentifier getReference]
}

function ::= id {
    mixin="org.intellij.sdk.language.psi.impl.IlocNamedElementImpl"
    implements="org.intellij.sdk.language.psi.IlocNamedElement"
    methods=[getName getType setName getNameIdentifier getReference]
}

variable ::= var {
     mixin="org.intellij.sdk.language.psi.impl.IlocNamedElementImpl"
     implements="org.intellij.sdk.language.psi.IlocNamedElement"
     methods=[getName getType setName getNameIdentifier getReference]
}

register ::= id {
    mixin="org.intellij.sdk.language.psi.impl.IlocNamedElementImpl"
    implements="org.intellij.sdk.language.psi.IlocNamedElement"
    methods=[getName getType setName getNameIdentifier getReference]
}